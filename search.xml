<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[逆向分析-消灭糖果游戏]]></title>
    <url>%2F2018%2F10%2F28%2F%E9%80%86%E5%90%91%E5%88%86%E6%9E%90-%E6%B6%88%E7%81%AD%E7%B3%96%E6%9E%9C%E6%B8%B8%E6%88%8F%2F</url>
    <content type="text"><![CDATA[分析一个”消灭糖果”游戏APP的代码. 0x01 APP预览首先看下危险权限. 危险权限如SMS SEND等. 话说实在搞不懂一个消除类游戏为什么要读取通讯录和录制声音. 随后是简单看了下支付界面. 0x02 开始分析首先干掉短信发送权限,防止玩脱. 上面可以看到是移动支付服务,所以我们先搜一下paySuccess和payCancel. 可以看到是有四处调用,此处暂时还不知道此方法是否是调用处. 第一个第二个跳转到一个接口类,无实际意义. 第三个是一个类文件,貌似是上传数据,无实际意义.希望第四个可以有突破. 从图中可以看到,貌似是一个pay(Activity activity, final PayParams payParams)方法,里面有匿名类回调函数用于返回是否支付成功. 简单分析了下,我们可以看到三个回调函数,此处毫无疑问是支付返回了.那么对于这三个方法,我们简单对比发现,有一个参数被修改了:payParams.b(2); 此处使用b方法来设置了标志位,成功设置为0,并返回给界面回调,通过EgameAgent.this.onPayFinish(payParams);方法. 失败与取消分别是1 和 2,我们回过头来,看到上面有三个判断: 这三个unicode转码的意思如下:12345678910111213141516if (!isInited()) &#123; payParams.b(-2); onPayFinish(payParams);&#125; else if (this.mPayAgentRecord.g()) &#123; payParams.b(-4); payParams.b(&quot;抱歉！您的支付太频繁！&quot;); onPayFinish(payParams);&#125; else if (this.mPayAgentRecord.c()) &#123; payParams.b(-4); payParams.b(&quot;支付失败，已达到当日限额！&quot;); onPayFinish(payParams);&#125; else if (this.mPayAgentRecord.d()) &#123; payParams.b(-4); payParams.b(&quot;支付失败，已达到当月限额！&quot;); onPayFinish(payParams);&#125; 我们可以看到这四个判断,第一个应该是支付异常,后面三个一目了然.我们如果给第一个isInited方法屏蔽掉判断,然后设置b方法值为0,然后返回是否就可以实现内购? 从上图可以看到,此代码位于 “EgameAgent” 类文件中. 下面就开始尝试修改实现内购. 0x03 动手破解首先跳转到davik字节码文件对应处: 随后开始寻找关键code.通过搜索unicode:\u62b1\u6b49\uff01\u60a8\u7684\u652f\u4ed8\u592a\u9891\u7e41\uff01找到了关键位置. 首先寻找isInited方法,它位于BasePayAgent类中当然我们可以通过让他返回false来达成目的,但我们并不需要这么做. 我们寻找到关键代码: 屏蔽掉红框内的代码,使代码逻辑结构变为:123456789101112payParams.b(-2);onPayFinish(payParams);if (this.mPayAgentRecord.g()) &#123; payParams.b(-4); payParams.b(&quot;\u62b1\u6b49\uff01\u60a8\u7684\u652f\u4ed8\u592a\u9891\u7e41\uff01&quot;); onPayFinish(payParams);&#125; else if (this.mPayAgentRecord.c()) &#123; payParams.b(-4); payParams.b(&quot;\u652f\u4ed8\u5931\u8d25\uff0c\u5df2\u8fbe\u5230\u5f53\u65e5\u9650\u989d\uff01&quot;); onPayFinish(payParams);&#125; else if (this.mPayAgentRecord.d()) &#123;.............. 保存,编译安装. 可以看到,已经屏蔽掉了短信发送权限: 我们尝试购买一个物品: 我们可以看到从219769增加到220169钻石,意为破解成功. 到此处破解内购无限钻石则成功.同时我们确保了不可能出现意外从而导致恶意扣费的问题产生. 此APP还有一个问题需要解决:有广告. 可以看到有一个横幅广告,非常烦人,并且他这个偶尔会弹出全屏广告,诱导用户下载恶意APP,行为诡异,需要制裁. 0x04 AD KILL全屏广告如图: 此广告全屏,并且无法点击其他位置来退出,只能点击中间并强制下载流氓APP. 我们简单看了下,有一个叫做AD的类. 可以看到是一个静态方法调用,可以猜到是全局唯一对象,故此处为关键位置,我们在他获取instance的时候将null返回给上层调用函数即可: 我们将nez改为eqz,返回null对象.我们知道null对象是空指针,他无法调用类中的对象来加载广告,从而实现屏蔽广告. 编译运行: 可以看到崩溃了,点击详情查看: 在一个叫ADManagerNative类中有一个方法调用了这个null对象,导致APP崩溃.我们试图解决: 可以看到此处调用了这个对象,并要求返回一个字符串.于是我们屏蔽调用并使用’ const-string v0, “” ‘返回一个空字符串: 保存编译运行. 广告去除完成.同时发现一个问题:在切换到后台时,会造成崩溃.需要修复: 我们定位到关键代码: 跳转到字节码位置: 修改判断条件,使其不调用null指针. 0x04 总结从这个APP了解到了移动应用支付安全的问题,对于支付安全更要注意关键代码的隐藏与加密,本文中所出示的代码明显处于未加密状态,有一定逆向经验的人员可以轻易破解扣费机制与广告功能. 对于我来说,这个APP扩宽了我的眼界,对于移动支付平台中的扣费逻辑SDK有一个详细的了解. 文中所示的APP仅为研究学习之用. 0x05 修改后的代码链接:https://pan.baidu.com/s/12ir2s4aq9qQOa8Qj1Ov2bw密码:xi9a]]></content>
      <categories>
        <category>Android逆向分析</category>
      </categories>
      <tags>
        <tag>APP逆向</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[逛微博看漫画引发的深思]]></title>
    <url>%2F2018%2F08%2F18%2F%E9%80%9B%E5%BE%AE%E5%8D%9A%E7%9C%8B%E6%BC%AB%E7%94%BB%E5%BC%95%E5%8F%91%E7%9A%84%E6%B7%B1%E6%80%9D%2F</url>
    <content type="text"><![CDATA[0x00 简介本文叙写了一个分析网站协议，并制作简易APP的全过程。 0x01 背景简述世界是物质的,物质是运动的. 作为高举社会主义道路伟大旗帜的新世纪青年,要有一颗永不言弃的精神,以及一个没有几个硬币的钱包.冲会员这种事情是不可能去冲的,这辈子都不会去冲. [会员真爽.jpg] 所以在面对VIP专享资源时,是万万不能向资本主义低头的。 今天在微博上看到1个漫画,非常好看. 微博上的原图看起来是这样子的: 点开一看居然这么好看!!!!!!!!! 但是看到第七节的时候…. 这就很尴尬了,居然让我去关注？ …….于是我就去关注了下 两个公众号是一个漫画的,这是之前的图 点进去链接一看: 很好,找到了漫画的名称.但是这种东西我不信是免费的,所以我还得找免费的网站看 (不建议看D版 有条件的还是去支持一下原作 但是这种盗版网站我是一定要制裁的!!) 于是去百度一下: 从页面上得到了1个信息: 这个漫画的名称别名有两个,第一个叫&lt;没关系是爱情啊&gt;,第二个叫&lt;染指成婚&gt;. 第一个去搜了下,是一个韩国偶像电视剧,无感. 于是去搜了下第二个关键key. 得到了信息. 此处我选择了第一个,估计下面的也一样. 下面有很多小广告,往下拉还有javascript脚本会自动向下翻页面,我再往上拉想点击 [下一页] 的时候发现根本无法翻上去,只能看小广告！流氓广告网站… 这个不能忍. 这个网站,缺少社会人的毒打.jpg. 我尝试使用科学的方法来解决它:作为一个21世纪普通的大学生，决定自己动手做一个漫画App专门看这个网站的漫画! 0x02 分析网站协议首先我们需要知道网站如何将漫画传送到我们的设备上. 在电脑上打开这个网站,他看起来是这样子的: 太恐怖了兄弟.今天我第一次打开这网站,居然拦截了204个小广告!! 安排,必须安排掉这个网站. 简单看下数据包: 这个数据很显然是得到了,我们看下网址 数据来源于这个网站,现在我们再看这个网址从何而来 简单搜索了下本地缓存,没有看到攻击目标. Not found. 于是换个方向思考. 直接看页面源码,从代码分析.无论JS如何调用Call,必然会有痕迹. 这一段代码定义了一个img标签,用来显示我们网页上的数据,可以看到它绑定了一个事件. 根据我在牧院大二时在农业物联网学院蹭HTML5课学到的知识,他绑定了一个叫做a_f_qTcms_Pic_nextUrl_Href()的JavaScript方法,意思是点击这个图片后自动翻页. 这是一个明显的攻击入口,我们几乎可以找到整个代码的入口来进行下一步分析. 但我们此处可以使用id检查来找到代码. 这个id叫:qTcms_pic,这个img的标签。 那么我们首先要知道，img标签如何在代码中动态设置src（资源图片，即漫画图片）？ 方法是：getElementByID(“ID”).src = xxxx 我们先搜索一个ID： 箭头所指处很可疑啊！ 点击去看看 看来是这个地方了！注释都写了是获取当前图片地址，并设置到页面上。 分别在两个地方下BreakPoint。 刷新页面： 可以看到正好在图片加载前paused了代码。 看下这段代码： 这个叫qTcms_Pic_curUrl的变量得到了一个网址，这个网址很眼熟啊！这就是那个人图片的网址： 终于找到了地址哪里来的了，现在我们分析下他是如何得到的。 因为这个网址很明显不是直接明文放在页面中的，必然是加密了然后通过某些算法解析出来。 getPicUrlP这个方法非常可疑。我们点进去： 可以看到： 1 这个网址不是在这里解密的，应该再上一步。 2 这个地方只是很简单的处理了其他信息。 这个直接就是明文了, 我们搜一下这个murl在哪里被赋值: 一番搜索,发现了这里.在这里,他明确的定义了这个变量等于空字符串. 656行处,他被赋值,这是第一次赋值. 执行了下,发现是从这个地方来的. 我们先不管decode是什么方法,我们主要关注这个qTcms_S_m_murl_e: 很有点可疑的密文,谁也看不懂. 那么这个又是从哪来的? 搜索一下后，点击进去发现在页面上. 原来如此!!这个数据是网页被加载时固定的赋值. 简单查看了下页面源码,确实是固定的. 那么现在我们得到了下列信息: 1 我们看到的漫画网址是被加密的 2 我们需要解密后才能知道这个原文. 3 漫画接口:http://mhpic.dongzaojiage.com/UploadFiles6/z/201712817732548.jpg 红色部分是动态解密得到的,所以我们需要安排它.前面黑色部分是固定域名. 回到刚才的地方,他是被加密的,所以我们需要解密,那么解密算法在哪里? 好像很复杂,我们尝试在Java中实现. Eclipse,启动. 0x03 反写解析算法严格来讲,Base64算不得加密. 所以我直接一句代码解析: 可以看到和网页上返回一致. 这里面的分隔符‘$qingtiandy$’用来分割这一话中所有图片,所以我们需要分别处理. 到这里基本就分析完这个网站的图片的加载和处理过程,下面开始制作一个APP专门看漫画. 0x04 制作APP 关于APP： MVP架构设计 Volley网络请求加载漫画数据 看完当前话自动加载下一话直到全部看完 没看写多少行，估计也就3000多行代码左右而已 作者牛逼。 代码开源地址：丶我跳转 过程简略我就不多解释,这里就给一些关键截图. 花费时间：一天半（哈哈哈有大半天我在一边看《绝对权力》一边Coding.jpg） 各种数据解析类 APP成品预览： 0x05 总结日常总结。 本次分析耗时一天半，含制作APP时间。 本次分析复习了以前大三在牧院时自学的Android开发技术，以及锻炼了JavaScript静态分析动态调试的基本功，作为逆向工程人员，还是有必要的。其中，android开发中还学习到了新的MVP设计框架技术，并成功运用到项目中。 不足之处： 技术还是太差了，代码编写速度太慢，思考问题不够100%全面。]]></content>
      <categories>
        <category>Android开发</category>
      </categories>
      <tags>
        <tag>APP开发</tag>
      </tags>
  </entry>
</search>
